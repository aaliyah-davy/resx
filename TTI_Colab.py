# -*- coding: utf-8 -*-
"""(Personal) Image-to_Image.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/153Pbfk6eT_tXIFBk2W5PbqK7LIrB0-Tr
"""

from google.colab import drive
drive.mount('/content/gdrive')

!pip install --upgrade diffusers transformers scipy

import torch
from diffusers import StableDiffusionPipeline

model_id = "CompVis/stable-diffusion-v1-4"
device = "cuda"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to(device)

import torch
from PIL import Image

from diffusers import StableDiffusionImg2ImgPipeline

device = "cuda"
model_id_or_path = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionImg2ImgPipeline.from_pretrained(model_id_or_path, torch_dtype=torch.float16)
pipe = pipe.to(device)

init_image = Image.open(BytesIO(response.content)).convert("RGB")
init_image = init_image.resize((768, 512))

prompt = "A fantasy landscape, trending on artstation"

images = pipe(prompt=prompt, image=init_image, strength=0.75, guidance_scale=7.5).images
images[0].save("skny.png")

# Commented out IPython magic to ensure Python compatibility.
# %%time
# """
# EXAMPLE:
# 
# prompts = ['drawing of a man holding a cactus and crying', \
#           'image of an alien holding takis and kissing a polar bear', \
#           'illustration of a penguin marrying a kangaroo', \
#           'painting of a space invasion by humans in an alien museum', \
#           'keys using humans shaped like a key to open a door', \
#           'students being taught by a sentient chair', \
#           'werewolfs eating jamaican food and drinking tea', \
#           'eels having a board meeting about how to walk on land' \
#           ]
# """
# 
# prompts= ['change me', \
#           'change me', \
#           'change me', \
#           'change me', \
#           'change me', \
#           'change me', \
#           'change me', \
#           'change me',
#           ]

# Commented out IPython magic to ensure Python compatibility.
# %%time
# #Show the results
# images = pipe(prompts).images
# images
# 
# #Show a single result
# images[0]

#Show the results in grid
from PIL import Image
def image_grid(imgs, rows, cols):
    w,h = imgs[0].size
    grid = Image.new('RGB', size=(cols*w, rows*h))
    for i, img in enumerate(imgs): grid.paste(img, box=(i%cols*w, i//cols*h))
    return grid

grid = image_grid(images, rows=2, cols=4)
grid

# Save all images
for i in range(len(images)-1):
  images[i].save(f"grid{i}.png")

